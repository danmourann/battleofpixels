INDEX:
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Battle of Pixels</title>
    <link rel="stylesheet" href="styles.css">
    <!-- Adicione os scripts do Firebase compatÃ­veis com ES5 -->
    <script src="https://www.gstatic.com/firebasejs/9.6.1/firebase-app-compat.js"></script>
    <script src="https://www.gstatic.com/firebasejs/9.6.1/firebase-database-compat.js"></script>
    <!-- Adicione Google Fonts -->
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;600&display=swap">
    <!-- Adicione Font Awesome -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <link rel="icon" href="images/logo.png" type="image/png">

</head>

<body>
    <header id="main-header">
        <div class="header-content">
            <h1>
                <span>B</span>
                <span>A</span>
                <span>T</span>
                <span>T</span>
                <span>L</span>
                <span>E</span>
                <span> </span>
                <span>O</span>
                <span>F</span>
                <span> </span>
                <span>P</span>
                <span>I</span>
                <span>X</span>
                <span>E</span>
                <span>L</span>
                <span>S</span>
            </h1>
            <div class="social-icons">
                <a href="https://www.instagram.com/battleofpixelsofc/" target="_blank" class="social-link">
                    <i class="fab fa-instagram"></i>
                </a>
                <a href="https://www.tiktok.com/@battleofpixelsofc" target="_blank" class="social-link">
                    <i class="fab fa-tiktok"></i>
                </a>
                <a href="#">
                    <img src="images/logo.png" target="_blank" class="logo-effect">
                </a>
                <span id="user-greeting" style="color: rgb(255, 255, 255); margin-left: 20px;"></span> <!-- Elemento movido aqui -->
            </div>
        </div>
    </header>
    
    
    <div id="pixel-board"></div>
    <script src="script.js"></script>
    <!-- Modal -->
    <div id="modal" class="modal">
        <div class="modal-content">
            <span class="close-button" id="close-modal">&times;</span>
            <h2>Sobre o Projeto</h2>
            <p>Este projeto foi desenvolvido com muito carinho por:</p>
            <h3>Daniel Moura</h3>
            <p>Obrigado por visitar! Se vocÃª tiver alguma dÃºvida ou sugestÃ£o, nÃ£o hesite em entrar em contato.</p>
            <p>ðŸ”— <a href="mailto:battleofpixels0@gmail.com">Envie um e-mail</a></p>
        </div>
    </div>
<!-- Modal de Boas-Vindas -->
<div id="welcome-modal" class="modal">
    <div class="modal-content">
        <span class="close-button" id="close-welcome-modal">&times;</span>
        <h2>Bem-vindo ao Beta Test!</h2>
        <p>Se vocÃª esta aqui, significa que foi um dos 6 escolhidos para o teste do game, parabens! Todas as artes feitas aqui serÃ£o usadas de cenario na versao oficial do jogo, entÃ£o, capriche e dÃª o seu melhor <3</p>
        <p>Por favor, insira sua assinatura:</p>
        <input type="text" id="nick-input" placeholder="Digite seu nick aqui">
        <button id="submit-nick">Enviar</button>
        <p>A sua arte Ã© apenas sua, os pixels usados ficarÃ£o com a sua assinatura!</p>
    </div>
</div>
</body>

</html>

STYLES:
body {
    display: flex;
    flex-direction: column;
    align-items: center;
    margin: 0;
    background-color: #070127;
    font-family: 'Poppins', sans-serif;
}

header {
    width: 100%;
    background-color: #000;
    padding: 10px 0;
    text-align: center;
    color: white;
    position: relative;
}

header::after {
    content: '';
    position: absolute;
    bottom: 0;
    left: 0;
    width: 100%;
    height: 1px;
    background: linear-gradient(90deg, green, cyan, blue, indigo, violet);
}

.header-content {
    display: flex;
    justify-content: center;
    align-items: center;
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 20px;
    position: relative;
}

.header-content .social-icons {
    position: absolute;
    right: 20px;
    display: flex;
    gap: 10px;
}

.header-content .social-icons i {
    font-size: 1.5em;
    cursor: pointer;
    color: white;
}

header h1 {
    font-family: 'Poppins', sans-serif;
    font-size: 1.5em;
    font-weight: 700;
    margin: 0;
    padding: 0;
    text-align: center;
}

header h1 span {
    display: inline-block;
    font-size: 1em;
    font-weight: bold;
    margin: 0 2px;
    animation: rainbow 3s infinite linear;
}

@keyframes rainbow {
    0% { color: #ff0000; }
    14% { color: #ff7f00; }
    28% { color: #ffff00; }
    42% { color: #00ff00; }
    57% { color: #0000ff; }
    71% { color: #4b0082; }
    85% { color: #8b00ff; }
    100% { color: #ff0000; }
}

header h1 span:nth-child(1) { animation-delay: 0s; }
header h1 span:nth-child(2) { animation-delay: 0.1s; }
header h1 span:nth-child(3) { animation-delay: 0.2s; }
header h1 span:nth-child(4) { animation-delay: 0.3s; }
header h1 span:nth-child(5) { animation-delay: 0.4s; }
header h1 span:nth-child(6) { animation-delay: 0.5s; }
header h1 span:nth-child(7) { animation-delay: 0.6s; }
header h1 span:nth-child(8) { animation-delay: 0.7s; }
header h1 span:nth-child(9) { animation-delay: 0.8s; }
header h1 span:nth-child(10) { animation-delay: 0.9s; }
header h1 span:nth-child(11) { animation-delay: 1s; }
header h1 span:nth-child(12) { animation-delay: 1.1s; }
header h1 span:nth-child(13) { animation-delay: 1.2s; }
header h1 span:nth-child(14) { animation-delay: 1.3s; }
header h1 span:nth-child(15) { animation-delay: 1.4s; }
header h1 span:nth-child(16) { animation-delay: 1.5s; }

.social-icons {
    position: absolute;
    right: 20px;
    display: flex;
    gap: 10px;
    align-items: center;
}

.social-icons .social-link {
    display: inline-block;
    transition: transform 0.3s ease;
}

.social-icons .social-link:hover {
    transform: scale(1.2);
}

.social-icons i {
    font-size: 1.5em;
    color: white;
}

.social-icons .custom-logo {
    width: 30px;
    height: auto;
}

#pixel-board {
    display: grid;
    grid-template-columns: repeat(100, 10px);
    grid-template-rows: repeat(100, 10px);
    gap: 1px;
    background-color: #ccc;
    margin-top: 20px;
}

.pixel {
    width: 10px;
    height: 10px;
    background-color: #fff;
    border: 1px solid #ddd;
    cursor: pointer;
}

.pixel:hover {
    border: 1px solid #000000;
}

@keyframes rainbow-text {
    0% {
        background-position: 200%;
    }
    100% {
        background-position: 0%;
    }
}

.modal {
    display: none;
    position: fixed;
    z-index: 1;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    overflow: auto;
    background-color: rgba(0, 0, 0, 0.6);
}

.modal-content {
    background-color: #fff;
    margin: 5% auto;
    padding: 20px;
    border-radius: 8px;
    width: 80vw;
    max-width: 600px;
    box-sizing: border-box;
    position: relative;
    text-align: center;
    border: 3px solid;
    border-image: linear-gradient(45deg, #ff0000, #ff7f00, #ffff00, #00ff00, #0000ff, #4b0082, #8b00ff, #ff0000);
    border-image-slice: 1;
}

#nick-input {
    width: 80%;
    padding: 10px;
    margin: 10px 0;
    font-size: 16px;
}

#submit-nick {
    padding: 10px 20px;
    font-size: 16px;
    cursor: pointer;
}

.close-button {
    color: #888;
    position: absolute;
    top: 10px;
    right: 10px;
    font-size: 28px;
    font-weight: bold;
    cursor: pointer;
}

.close-button:hover,
.close-button:focus {
    color: black;
    text-decoration: none;
}

h2 {
    font-size: 24px;
    color: #333;
}

h3 {
    font-size: 20px;
    color: #0004ff9d;
}

p {
    font-size: 16px;
    color: #555;
    line-height: 1.5;
}

@keyframes typing {
    from { width: 0; }
    to { width: 100%; }
}

#user-greeting {
    display: inline-block;
    overflow: hidden;
    white-space: nowrap;
    border-right: 0.15em solid orange;
    font-size: 1.2em;
    animation: typing 2s steps(30, end), blink-caret 0.75s step-end infinite;
}

@keyframes blink-caret {
    from, to { border-color: transparent; }
    50% { border-color: orange; }
}

.tooltip {
    position: absolute;
    background-color: #333;
    color: #fff;
    padding: 5px;
    border-radius: 3px;
    font-size: 12px;
    z-index: 10;
    pointer-events: none;
}

.logo-effect {
    width: 35px;
    height: auto;
    transition: transform 0.3s;
    transform-origin: center;
}

.logo-effect:hover {
    transform: scale(1.05);
}

SCRIPT:
// script.js

// ConfiguraÃ§Ãµes do Firebase (substitua com suas prÃ³prias configuraÃ§Ãµes)
const firebaseConfig = {
    apiKey: "AIzaSyBUTRTAWyrFzCCT_vygthHkBCe_zqvg7x0",
    authDomain: "battleofpixels-aab44.firebaseapp.com",
    databaseURL: "https://battleofpixels-aab44-default-rtdb.firebaseio.com",
    projectId: "battleofpixels-aab44",
    storageBucket: "battleofpixels-aab44.appspot.com",
    messagingSenderId: "543163281560",
    appId: "1:543163281560:web:889839e86742c147aee0ed",
    measurementId: "G-M14QQ0NQKT"
};

// Inicializa o Firebase
firebase.initializeApp(firebaseConfig);
const database = firebase.database();

document.addEventListener('DOMContentLoaded', () => {
    const pixelBoard = document.getElementById('pixel-board');

    // Cria os pixels
    for (let i = 0; i < 10000; i++) { // 100x100 pixels
        const pixel = document.createElement('div');
        pixel.classList.add('pixel');
        pixel.dataset.index = i;
        pixelBoard.appendChild(pixel);
    }

    // Carrega o estado atual do quadro de pixels do Firebase
    database.ref('pixels').once('value', (snapshot) => {
        const pixels = snapshot.val();
        if (pixels) {
            Object.keys(pixels).forEach(index => {
                const pixel = document.querySelector(`.pixel[data-index="${index}"]`);
                pixel.style.backgroundColor = pixels[index].color;
                pixel.dataset.nick = pixels[index].nick; // Adiciona o nick como um atributo de dados
            });
        }
    });

    // Adiciona evento de clique em cada pixel
    pixelBoard.addEventListener('click', (event) => {
        if (event.target.classList.contains('pixel')) {
            const index = event.target.dataset.index;
            const color = 'black'; // Altera a cor do pixel clicado
            const currentUserNick = localStorage.getItem('userNick'); // ObtÃ©m o nick do jogador atual

            // Atualiza a cor do pixel no Firebase junto com o nick do jogador
            database.ref('pixels/' + index).set({
                color: color,
                nick: currentUserNick
            });

            // Atualiza a cor do pixel na UI
            event.target.style.backgroundColor = color;
            event.target.dataset.nick = currentUserNick; // Adiciona o nick como um atributo de dados
        }
    });

    // Escuta mudanÃ§as em tempo real no Firebase
    database.ref('pixels').on('child_changed', (snapshot) => {
        const index = snapshot.key;
        const data = snapshot.val();
        const pixel = document.querySelector(`.pixel[data-index="${index}"]`);
        pixel.style.backgroundColor = data.color;
        pixel.dataset.nick = data.nick; // Adiciona o nick como um atributo de dados
    });

    // Escuta adiÃ§Ãµes em tempo real no Firebase
    database.ref('pixels').on('child_added', (snapshot) => {
        const index = snapshot.key;
        const data = snapshot.val();
        const pixel = document.querySelector(`.pixel[data-index="${index}"]`);
        pixel.style.backgroundColor = data.color;
        pixel.dataset.nick = data.nick; // Adiciona o nick como um atributo de dados
    });

    // Escuta remoÃ§Ãµes em tempo real no Firebase (caso relevante)
    database.ref('pixels').on('child_removed', (snapshot) => {
        const index = snapshot.key;
        const pixel = document.querySelector(`.pixel[data-index="${index}"]`);
        pixel.style.backgroundColor = ''; // Reseta a cor do pixel
        delete pixel.dataset.nick; // Remove o atributo de dados do nick
    });

    // Modal de Boas-Vindas
    const welcomeModal = document.getElementById('welcome-modal');
    const closeWelcomeModal = document.getElementById('close-welcome-modal');
    const submitNick = document.getElementById('submit-nick');
    const nickInput = document.getElementById('nick-input');
    const userGreeting = document.getElementById('user-greeting'); // Elemento para o nick

    // FunÃ§Ã£o para exibir o texto letra por letra
    function typeText(text, element) {
        element.textContent = ''; // Clear the existing text
        let i = 0;
        const speed = 100; // The speed/duration of the effect in milliseconds
        function type() {
            if (i < text.length) {
                element.textContent += text.charAt(i);
                i++;
                setTimeout(type, speed);
            }
        }
        type();
    }

    // Verifica se o nick do usuÃ¡rio estÃ¡ salvo no localStorage
    const savedNick = localStorage.getItem('userNick');

    if (savedNick) {
        // Se o nick estÃ¡ salvo, exibe a saudaÃ§Ã£o diretamente
        userGreeting.textContent = `OlÃ¡, ${savedNick}`;
    } else {
        // Se o nick nÃ£o estÃ¡ salvo, exibe o modal de boas-vindas
        window.addEventListener('load', () => {
            welcomeModal.style.display = 'block';
        });

        // Fecha o modal de boas-vindas quando o usuÃ¡rio clica no "x"
        closeWelcomeModal.addEventListener('click', () => {
            welcomeModal.style.display = 'none';
        });

        // Fecha o modal de boas-vindas se o usuÃ¡rio clicar fora do modal
        window.addEventListener('click', (event) => {
            if (event.target === welcomeModal) {
                welcomeModal.style.display = 'none';
            }
        });

        // Salva o nick no Firebase e no localStorage quando o botÃ£o Ã© clicado
        submitNick.addEventListener('click', () => {
            const nick = nickInput.value.trim();
            if (nick) {
                // Salva o nick no Firebase
                database.ref('betaTesters').push({ nick: nick }).then(() => {
                    // Salva o nick no localStorage
                    localStorage.setItem('userNick', nick);
                    // Atualiza o elemento de saudaÃ§Ã£o
                    typeText(`OlÃ¡, ${nick}`, userGreeting);
                    // Fecha o modal de boas-vindas
                    welcomeModal.style.display = 'none';
                }).catch(error => {
                    console.error('Erro ao salvar o nick:', error);
                });
            } else {
                alert('Por favor, insira um nick vÃ¡lido.');
            }
        });
    }

    // Modal de InformaÃ§Ãµes
    const modal = document.getElementById('modal');
    const closeModal = document.getElementById('close-modal');
    const customLogo = document.querySelector('.logo-effect'); // Seleciona a logo personalizada

    // Abre o modal quando a logo personalizada Ã© clicada
    customLogo.addEventListener('click', () => {
        modal.style.display = 'block';
    });

    // Fecha o modal quando o usuÃ¡rio clica no "x"
    closeModal.addEventListener('click', () => {
        modal.style.display = 'none';
    });

    // Fecha o modal se o usuÃ¡rio clicar fora do modal
    window.addEventListener('click', (event) => {
        if (event.target === modal) {
            modal.style.display = 'none';
        }
    });

    // Adiciona evento de mouseover e mouseout para exibir a assinatura do jogador
    pixelBoard.addEventListener('mouseover', (event) => {
        if (event.target.classList.contains('pixel')) {
            const nick = event.target.dataset.nick;
            if (nick) {
                const tooltip = document.createElement('div');
                tooltip.classList.add('tooltip');
                tooltip.textContent = nick;
                document.body.appendChild(tooltip);

                const rect = event.target.getBoundingClientRect();
                tooltip.style.left = `${rect.left + window.pageXOffset}px`;
                tooltip.style.top = `${rect.top + window.pageYOffset - tooltip.offsetHeight}px`;

                event.target.tooltip = tooltip;
            }
        }
    });

    pixelBoard.addEventListener('mouseout', (event) => {
        if (event.target.classList.contains('pixel')) {
            if (event.target.tooltip) {
                document.body.removeChild(event.target.tooltip);
                event.target.tooltip = null;
            }
        }
    });
});